# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import logic.protogen.customer_pb2 as customer__pb2


class CustomerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCustomer = channel.unary_unary(
                '/Customer/CreateCustomer',
                request_serializer=customer__pb2.CreateCustomerRequest.SerializeToString,
                response_deserializer=customer__pb2.CreateCustomerResponse.FromString,
                )
        self.ReadCustomer = channel.unary_unary(
                '/Customer/ReadCustomer',
                request_serializer=customer__pb2.ReadCustomerRequest.SerializeToString,
                response_deserializer=customer__pb2.ReadCustomerResponse.FromString,
                )
        self.ReadCustomerList = channel.unary_unary(
                '/Customer/ReadCustomerList',
                request_serializer=customer__pb2.ReadCustomerListRequest.SerializeToString,
                response_deserializer=customer__pb2.ReadCustomerListResponse.FromString,
                )


class CustomerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateCustomer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadCustomer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadCustomerList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CustomerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCustomer': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCustomer,
                    request_deserializer=customer__pb2.CreateCustomerRequest.FromString,
                    response_serializer=customer__pb2.CreateCustomerResponse.SerializeToString,
            ),
            'ReadCustomer': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadCustomer,
                    request_deserializer=customer__pb2.ReadCustomerRequest.FromString,
                    response_serializer=customer__pb2.ReadCustomerResponse.SerializeToString,
            ),
            'ReadCustomerList': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadCustomerList,
                    request_deserializer=customer__pb2.ReadCustomerListRequest.FromString,
                    response_serializer=customer__pb2.ReadCustomerListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Customer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Customer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateCustomer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Customer/CreateCustomer',
            customer__pb2.CreateCustomerRequest.SerializeToString,
            customer__pb2.CreateCustomerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadCustomer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Customer/ReadCustomer',
            customer__pb2.ReadCustomerRequest.SerializeToString,
            customer__pb2.ReadCustomerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadCustomerList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Customer/ReadCustomerList',
            customer__pb2.ReadCustomerListRequest.SerializeToString,
            customer__pb2.ReadCustomerListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
