# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import protogen.song_pb2 as song__pb2


class SongStub(object):
    """Song servicer
    Only has CRUD methods, as it is only used for meta data
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createSong = channel.unary_unary(
                '/Song/createSong',
                request_serializer=song__pb2.CreateSongRequest.SerializeToString,
                response_deserializer=song__pb2.CreateSongResponse.FromString,
                )
        self.getSongById = channel.unary_unary(
                '/Song/getSongById',
                request_serializer=song__pb2.GetSongByIdRequest.SerializeToString,
                response_deserializer=song__pb2.GetSongByIdResponse.FromString,
                )
        self.updateSong = channel.unary_unary(
                '/Song/updateSong',
                request_serializer=song__pb2.UpdateSongRequest.SerializeToString,
                response_deserializer=song__pb2.UpdateSongResponse.FromString,
                )
        self.deleteSongById = channel.unary_unary(
                '/Song/deleteSongById',
                request_serializer=song__pb2.DeleteSongByIdRequest.SerializeToString,
                response_deserializer=song__pb2.DeleteSongByIdResponse.FromString,
                )
        self.getAllSongs = channel.unary_unary(
                '/Song/getAllSongs',
                request_serializer=song__pb2.GetAllSongsRequest.SerializeToString,
                response_deserializer=song__pb2.GetAllSongsResponse.FromString,
                )


class SongServicer(object):
    """Song servicer
    Only has CRUD methods, as it is only used for meta data
    """

    def createSong(self, request, context):
        """CreateSong - Creates and persist new Song
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSongById(self, request, context):
        """GetSongById - Returns Song based on ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateSong(self, request, context):
        """UpdateSong - Updates info on existing Song
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteSongById(self, request, context):
        """DeleteSong - Deletes Song based on ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAllSongs(self, request, context):
        """GetAllSongs - Retrieves all songs from DB
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SongServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createSong': grpc.unary_unary_rpc_method_handler(
                    servicer.createSong,
                    request_deserializer=song__pb2.CreateSongRequest.FromString,
                    response_serializer=song__pb2.CreateSongResponse.SerializeToString,
            ),
            'getSongById': grpc.unary_unary_rpc_method_handler(
                    servicer.getSongById,
                    request_deserializer=song__pb2.GetSongByIdRequest.FromString,
                    response_serializer=song__pb2.GetSongByIdResponse.SerializeToString,
            ),
            'updateSong': grpc.unary_unary_rpc_method_handler(
                    servicer.updateSong,
                    request_deserializer=song__pb2.UpdateSongRequest.FromString,
                    response_serializer=song__pb2.UpdateSongResponse.SerializeToString,
            ),
            'deleteSongById': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteSongById,
                    request_deserializer=song__pb2.DeleteSongByIdRequest.FromString,
                    response_serializer=song__pb2.DeleteSongByIdResponse.SerializeToString,
            ),
            'getAllSongs': grpc.unary_unary_rpc_method_handler(
                    servicer.getAllSongs,
                    request_deserializer=song__pb2.GetAllSongsRequest.FromString,
                    response_serializer=song__pb2.GetAllSongsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Song', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Song(object):
    """Song servicer
    Only has CRUD methods, as it is only used for meta data
    """

    @staticmethod
    def createSong(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Song/createSong',
            song__pb2.CreateSongRequest.SerializeToString,
            song__pb2.CreateSongResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSongById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Song/getSongById',
            song__pb2.GetSongByIdRequest.SerializeToString,
            song__pb2.GetSongByIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateSong(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Song/updateSong',
            song__pb2.UpdateSongRequest.SerializeToString,
            song__pb2.UpdateSongResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteSongById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Song/deleteSongById',
            song__pb2.DeleteSongByIdRequest.SerializeToString,
            song__pb2.DeleteSongByIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAllSongs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Song/getAllSongs',
            song__pb2.GetAllSongsRequest.SerializeToString,
            song__pb2.GetAllSongsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
