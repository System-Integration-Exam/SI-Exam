// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: vinyl.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Metadata.Protos {
  /// <summary>
  ///Vinyl servicer
  ///Only has CRUD methods, as it is only used for meta data
  /// </summary>
  public static partial class Vinyl
  {
    static readonly string __ServiceName = "Vinyl";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Metadata.Protos.CreateVinylRequest> __Marshaller_CreateVinylRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Metadata.Protos.CreateVinylRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Metadata.Protos.CreateVinylResponse> __Marshaller_CreateVinylResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Metadata.Protos.CreateVinylResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Metadata.Protos.GetVinylByIdRequest> __Marshaller_GetVinylByIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Metadata.Protos.GetVinylByIdRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Metadata.Protos.GetVinylByIdResponse> __Marshaller_GetVinylByIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Metadata.Protos.GetVinylByIdResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Metadata.Protos.UpdateVinylRequest> __Marshaller_UpdateVinylRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Metadata.Protos.UpdateVinylRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Metadata.Protos.UpdateVinylResponse> __Marshaller_UpdateVinylResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Metadata.Protos.UpdateVinylResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Metadata.Protos.DeleteVinylByIdRequest> __Marshaller_DeleteVinylByIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Metadata.Protos.DeleteVinylByIdRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Metadata.Protos.DeleteVinylByIdResponse> __Marshaller_DeleteVinylByIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Metadata.Protos.DeleteVinylByIdResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Metadata.Protos.GetAllVinylRequest> __Marshaller_GetAllVinylRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Metadata.Protos.GetAllVinylRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Metadata.Protos.GetAllVinylResponse> __Marshaller_GetAllVinylResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Metadata.Protos.GetAllVinylResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Metadata.Protos.CreateVinylRequest, global::Metadata.Protos.CreateVinylResponse> __Method_createVinyl = new grpc::Method<global::Metadata.Protos.CreateVinylRequest, global::Metadata.Protos.CreateVinylResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createVinyl",
        __Marshaller_CreateVinylRequest,
        __Marshaller_CreateVinylResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Metadata.Protos.GetVinylByIdRequest, global::Metadata.Protos.GetVinylByIdResponse> __Method_getVinylById = new grpc::Method<global::Metadata.Protos.GetVinylByIdRequest, global::Metadata.Protos.GetVinylByIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getVinylById",
        __Marshaller_GetVinylByIdRequest,
        __Marshaller_GetVinylByIdResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Metadata.Protos.UpdateVinylRequest, global::Metadata.Protos.UpdateVinylResponse> __Method_updateVinyl = new grpc::Method<global::Metadata.Protos.UpdateVinylRequest, global::Metadata.Protos.UpdateVinylResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updateVinyl",
        __Marshaller_UpdateVinylRequest,
        __Marshaller_UpdateVinylResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Metadata.Protos.DeleteVinylByIdRequest, global::Metadata.Protos.DeleteVinylByIdResponse> __Method_deleteVinylById = new grpc::Method<global::Metadata.Protos.DeleteVinylByIdRequest, global::Metadata.Protos.DeleteVinylByIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteVinylById",
        __Marshaller_DeleteVinylByIdRequest,
        __Marshaller_DeleteVinylByIdResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Metadata.Protos.GetAllVinylRequest, global::Metadata.Protos.GetAllVinylResponse> __Method_getAllVinyl = new grpc::Method<global::Metadata.Protos.GetAllVinylRequest, global::Metadata.Protos.GetAllVinylResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getAllVinyl",
        __Marshaller_GetAllVinylRequest,
        __Marshaller_GetAllVinylResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Metadata.Protos.VinylReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for Vinyl</summary>
    public partial class VinylClient : grpc::ClientBase<VinylClient>
    {
      /// <summary>Creates a new client for Vinyl</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public VinylClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Vinyl that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public VinylClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected VinylClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected VinylClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///CreateVinyl - Creates and persist new vinyl
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Metadata.Protos.CreateVinylResponse createVinyl(global::Metadata.Protos.CreateVinylRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createVinyl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///CreateVinyl - Creates and persist new vinyl
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Metadata.Protos.CreateVinylResponse createVinyl(global::Metadata.Protos.CreateVinylRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createVinyl, null, options, request);
      }
      /// <summary>
      ///CreateVinyl - Creates and persist new vinyl
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Metadata.Protos.CreateVinylResponse> createVinylAsync(global::Metadata.Protos.CreateVinylRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createVinylAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///CreateVinyl - Creates and persist new vinyl
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Metadata.Protos.CreateVinylResponse> createVinylAsync(global::Metadata.Protos.CreateVinylRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createVinyl, null, options, request);
      }
      /// <summary>
      ///GetVinylById - Returns Vinyl based on ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Metadata.Protos.GetVinylByIdResponse getVinylById(global::Metadata.Protos.GetVinylByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getVinylById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///GetVinylById - Returns Vinyl based on ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Metadata.Protos.GetVinylByIdResponse getVinylById(global::Metadata.Protos.GetVinylByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getVinylById, null, options, request);
      }
      /// <summary>
      ///GetVinylById - Returns Vinyl based on ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Metadata.Protos.GetVinylByIdResponse> getVinylByIdAsync(global::Metadata.Protos.GetVinylByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getVinylByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///GetVinylById - Returns Vinyl based on ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Metadata.Protos.GetVinylByIdResponse> getVinylByIdAsync(global::Metadata.Protos.GetVinylByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getVinylById, null, options, request);
      }
      /// <summary>
      ///UpdateVinyl - Updates info on existing Vinyl
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Metadata.Protos.UpdateVinylResponse updateVinyl(global::Metadata.Protos.UpdateVinylRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateVinyl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///UpdateVinyl - Updates info on existing Vinyl
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Metadata.Protos.UpdateVinylResponse updateVinyl(global::Metadata.Protos.UpdateVinylRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateVinyl, null, options, request);
      }
      /// <summary>
      ///UpdateVinyl - Updates info on existing Vinyl
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Metadata.Protos.UpdateVinylResponse> updateVinylAsync(global::Metadata.Protos.UpdateVinylRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateVinylAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///UpdateVinyl - Updates info on existing Vinyl
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Metadata.Protos.UpdateVinylResponse> updateVinylAsync(global::Metadata.Protos.UpdateVinylRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateVinyl, null, options, request);
      }
      /// <summary>
      ///DeleteVinyl - Deletes Vinyl based on ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Metadata.Protos.DeleteVinylByIdResponse deleteVinylById(global::Metadata.Protos.DeleteVinylByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteVinylById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///DeleteVinyl - Deletes Vinyl based on ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Metadata.Protos.DeleteVinylByIdResponse deleteVinylById(global::Metadata.Protos.DeleteVinylByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteVinylById, null, options, request);
      }
      /// <summary>
      ///DeleteVinyl - Deletes Vinyl based on ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Metadata.Protos.DeleteVinylByIdResponse> deleteVinylByIdAsync(global::Metadata.Protos.DeleteVinylByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteVinylByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///DeleteVinyl - Deletes Vinyl based on ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Metadata.Protos.DeleteVinylByIdResponse> deleteVinylByIdAsync(global::Metadata.Protos.DeleteVinylByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteVinylById, null, options, request);
      }
      /// <summary>
      ///GetAllVinyl - Retrieves all Vinyl from database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Metadata.Protos.GetAllVinylResponse getAllVinyl(global::Metadata.Protos.GetAllVinylRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getAllVinyl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///GetAllVinyl - Retrieves all Vinyl from database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Metadata.Protos.GetAllVinylResponse getAllVinyl(global::Metadata.Protos.GetAllVinylRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getAllVinyl, null, options, request);
      }
      /// <summary>
      ///GetAllVinyl - Retrieves all Vinyl from database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Metadata.Protos.GetAllVinylResponse> getAllVinylAsync(global::Metadata.Protos.GetAllVinylRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getAllVinylAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///GetAllVinyl - Retrieves all Vinyl from database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Metadata.Protos.GetAllVinylResponse> getAllVinylAsync(global::Metadata.Protos.GetAllVinylRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getAllVinyl, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override VinylClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new VinylClient(configuration);
      }
    }

  }
}
#endregion
